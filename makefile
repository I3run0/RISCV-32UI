# --- Variables ---
IVERILOG = iverilog
VVP = vvp
GTKWAVE = gtkwave
DIFF = diff

# Automatically find Verilog source files in root and include/
SRCS = $(wildcard *.v) include/def_select.v

# Unit Testbenches
UNIT_TBS = $(wildcard test_bench/*_tb.v)
UNIT_TARGETS = $(patsubst test_bench/%.v, build/%.out, $(UNIT_TBS))
UNIT_TEST_NAMES = $(patsubst test_bench/%_tb.v, %, $(UNIT_TBS))

# Integration Tests (Assuming test/testeNN.mem and test/saidaNN.ok exist)
INTEGRATION_MEMS = $(wildcard test/*.mem)
INTEGRATION_TEST_NAMES = $(patsubst test/teste%.mem, %, $(INTEGRATION_MEMS))

# Output Directories
BUILD_DIR = build
WAVE_DIR = waves
LOG_DIR = logs

# --- Recipes ---

.PHONY: all compile_unit run_unit test_unit compile_integration run_integration test_integration test clean view_wave run_single_unit

all: test

# Create output directories
$(BUILD_DIR) $(WAVE_DIR) $(LOG_DIR):
	mkdir -p $@

# == Unit Tests ==

# Compile all unit testbenches
compile_unit: $(BUILD_DIR) $(UNIT_TARGETS)

# Rule to compile a single unit testbench
$(BUILD_DIR)/%_tb.out: test_bench/%_tb.v $(SRCS) | $(BUILD_DIR) $(WAVE_DIR)
	@echo "Compiling unit test: $*"
	$(IVERILOG) -o $@ -I include test_bench/$*_tb.v $(filter-out test_bench/%_tb.v tb.v,$(SRCS))

# Run all compiled unit testbenches (Assumes unit tests generate VCDs named appropriately in test_bench/)
# If unit tests also generate 'saida.vcd', this needs adjustment. Assuming they use specific names like 'alu_tb.vcd'.
run_unit: compile_unit | $(LOG_DIR) $(WAVE_DIR)
	@echo "--- Running All Unit Tests ---"
	@for test in $(UNIT_TEST_NAMES); do \
		echo "Running $$test..."; \
		$(VVP) $(BUILD_DIR)/$${test}_tb.out > $(LOG_DIR)/$${test}.log 2>&1; \
		if [ -f "$${test}_tb.vcd" ]; then mv $${test}_tb.vcd $(WAVE_DIR)/; fi; \
	done

# Run a single unit test (e.g., make run_single_unit T=alu)
run_single_unit: | $(LOG_DIR) $(BUILD_DIR) $(WAVE_DIR)
	@if [ -z "$(T)" ]; then echo "Usage: make run_single_unit T=<test_name>"; exit 1; fi
	@if [ ! -f "test_bench/$(T)_tb.v" ]; then echo "Error: Testbench test_bench/$(T)_tb.v not found."; exit 1; fi
	@# Compile if necessary
	@$(MAKE) --no-print-directory $(BUILD_DIR)/$(T)_tb.out
	@echo "--- Running Unit Test: $(T) ---"
	$(VVP) $(BUILD_DIR)/$(T)_tb.out > $(LOG_DIR)/$(T).log 2>&1
	@echo "Log file: $(LOG_DIR)/$(T).log"
	@# Move VCD if generated by unit test
	@if [ -f "$(T)_tb.vcd" ]; then \
		mv $(T)_tb.vcd $(WAVE_DIR)/; \
		echo "Wave file: $(WAVE_DIR)/$(T)_tb.vcd"; \
	else \
		echo "Wave file not generated or already moved."; \
	fi
	@# Optional: Immediately check result
	@if grep -q -E '(\$error|FAIL)' $(LOG_DIR)/$(T).log; then \
		echo "$(T): FAILED"; \
		cat $(LOG_DIR)/$(T).log; \
		exit 1; \
	else \
		echo "$(T): PASSED"; \
	fi


# Check results of all unit testbenches based on log files
test_unit: run_unit
	@echo "--- Checking Unit Test Results ---"
	@PASSED=true; \
	for test in $(UNIT_TEST_NAMES); do \
		if grep -q -E '(\$error|FAIL)' $(LOG_DIR)/$$test.log; then \
			echo "$$test: FAILED"; \
			echo "  Log: $(LOG_DIR)/$$test.log"; \
			PASSED=false; \
		else \
			echo "$$test: PASSED"; \
		fi; \
	done; \
	if ! $$PASSED; then \
		echo "Unit tests FAILED!"; \
		exit 1; \
	else \
		echo "Unit tests PASSED!"; \
	fi

# == Integration Tests ==

# Compile the main testbench (tb.v)
compile_integration: $(BUILD_DIR)/tb.out

$(BUILD_DIR)/tb.out: tb.v $(SRCS) | $(BUILD_DIR)
	@echo "Compiling integration testbench: tb.v"
	$(IVERILOG) -o $@ -I include tb.v $(filter-out tb.v,$(SRCS))

# Run all integration tests (using different memory files)
run_integration: compile_integration | $(LOG_DIR) $(WAVE_DIR)
	@echo "--- Running Integration Tests ---"
	@for test_num in $(INTEGRATION_TEST_NAMES); do \
		echo "Running integration test $$test_num..."; \
		if [ ! -f test/teste$$test_num.mem ]; then echo "Missing test/teste$$test_num.mem"; exit 1; fi; \
		cp test/teste$$test_num.mem memory.mem; \
		$(VVP) $(BUILD_DIR)/tb.out > $(LOG_DIR)/integration_$$test_num.log 2>&1; \
		if [ -f saida.vcd ]; then \
			mv saida.vcd $(WAVE_DIR)/saida$$test_num.vcd; \
		else \
			echo "Warning: saida.vcd not created for test $$test_num"; \
		fi; \
		rm -f memory.mem; \
	done

# Check results of all integration tests using diff
test_integration: run_integration
	@echo "--- Checking Integration Test Results ---"
	@PASSED=true; \
	for test_num in $(INTEGRATION_TEST_NAMES); do \
		LOG_FILE=$(LOG_DIR)/integration_$$test_num.log; \
		OK_FILE=test/saida$$test_num.ok; \
		if [ ! -f "$$OK_FILE" ]; then \
			echo "WARNING: Missing expected output file $$OK_FILE for test $$test_num"; \
			continue; \
		fi; \
		if $(DIFF) -q "$$LOG_FILE" "$$OK_FILE" > /dev/null; then \
			echo "Integration Test $$test_num: PASSED"; \
		else \
			echo "Integration Test $$test_num: FAILED"; \
			echo "  Output log ($$LOG_FILE) differs from expected ($$OK_FILE)."; \
			PASSED=false; \
		fi; \
	done; \
	if ! $$PASSED; then \
		echo "Integration tests FAILED!"; \
		exit 1; \
	else \
		echo "Integration tests PASSED!"; \
	fi

# == Combined Test ==
test: test_unit test_integration

# Clean generated files
clean:
	rm -rf $(BUILD_DIR) $(WAVE_DIR) $(LOG_DIR)