IVERILOG = iverilog
VVP = vvp
GTKWAVE = gtkwave
DIFF = diff

# Verilog Sources (Core logic + includes, EXCLUDE all testbenches)
SRCS = $(filter-out tb.v tb_regdump.v test_bench/%.v, $(wildcard *.v)) include/def_select.v

# Unit Tests (Using test_bench/*.v)
UNIT_TBS = $(wildcard test_bench/*_tb.v)
UNIT_TARGETS = $(patsubst test_bench/%.v, build/%.out, $(UNIT_TBS))
UNIT_TEST_NAMES = $(patsubst test_bench/%_tb.v, %, $(UNIT_TBS))

# Integration Tests (Using tb.v)
INTEGRATION_MEMS = $(wildcard test/teste*.mem)
INTEGRATION_TEST_NAMES = $(patsubst test/teste%.mem, %, $(INTEGRATION_MEMS))

# Register Dump Tests (Using tb_regdump.v)
REG_DUMP_MEMS = $(wildcard test/reg_test*.mem)
# Derive test names, e.g., from test/reg_test01.mem get reg_test01
REG_DUMP_TEST_NAMES = $(patsubst test/%.mem,%,$(REG_DUMP_MEMS))
# Define expected output files (created manually)
REG_DUMP_TEST_OKS = $(patsubst test/%.mem,test/%.regok,$(REG_DUMP_MEMS))
# Define actual output files generated by simulation
REG_DUMP_TEST_ACTUALS = $(patsubst test/%.mem,logs/%.regactual,$(REG_DUMP_MEMS))

# Output Directories
BUILD_DIR = build
WAVE_DIR = waves
LOG_DIR = logs

# --- Recipes ---

.PHONY: all test clean \
        compile_unit run_unit test_unit run_single_unit \
        compile_integration run_integration test_integration \
        compile_reg_dump run_reg_dump test_reg_dump \
        gen_regok view_wave

all: test

# Create output directories if they don't exist
$(BUILD_DIR) $(WAVE_DIR) $(LOG_DIR):
	mkdir -p $@

# == Unit Tests ==

# Compile all unit testbenches
compile_unit: $(BUILD_DIR) $(UNIT_TARGETS)

# Rule to compile a single unit testbench
# Note: Compiles the specific testbench + SRCS (which excludes other testbenches)
$(BUILD_DIR)/%_tb.out: test_bench/%_tb.v $(SRCS) | $(BUILD_DIR) $(WAVE_DIR)
	@echo "Compiling unit test: $*"
	$(IVERILOG) -o $@ -I include test_bench/$*_tb.v $(SRCS)

# Run all compiled unit testbenches
run_unit: compile_unit | $(LOG_DIR) $(WAVE_DIR)
	@echo "--- Running All Unit Tests ---"
	@for test in $(UNIT_TEST_NAMES); do \
		echo "Running $$test..."; \
		$(VVP) $(BUILD_DIR)/$${test}_tb.out > $(LOG_DIR)/$${test}.log 2>&1; \
		if [ -f "$${test}_tb.vcd" ]; then mv $${test}_tb.vcd $(WAVE_DIR)/; fi; \
	done

# Run a single unit test (e.g., make run_single_unit T=alu)
run_single_unit: | $(LOG_DIR) $(BUILD_DIR) $(WAVE_DIR)
	@if [ -z "$(T)" ]; then echo "Usage: make run_single_unit T=<test_name>"; exit 1; fi
	@if [ ! -f "test_bench/$(T)_tb.v" ]; then echo "Error: Testbench test_bench/$(T)_tb.v not found."; exit 1; fi
	@$(MAKE) --no-print-directory $(BUILD_DIR)/$(T)_tb.out
	@echo "--- Running Unit Test: $(T) ---"
	$(VVP) $(BUILD_DIR)/$(T)_tb.out > $(LOG_DIR)/$(T).log 2>&1
	@echo "Log file: $(LOG_DIR)/$(T).log"
	@if [ -f "$(T)_tb.vcd" ]; then \
		mv $(T)_tb.vcd $(WAVE_DIR)/; \
		echo "Wave file: $(WAVE_DIR)/$(T)_tb.vcd"; \
	else \
		echo "Wave file not generated or already moved."; \
	fi
	@if grep -q -E '(\$error|FAIL|Error)' $(LOG_DIR)/$(T).log; then \
		echo "$(T): FAILED"; \
		cat $(LOG_DIR)/$(T).log; \
		exit 1; \
	else \
		echo "$(T): PASSED"; \
	fi

# Check results of all unit testbenches based on log files
test_unit: run_unit
	@echo "\n--- Checking Unit Test Results ---"
	@PASSED=true; \
	for test in $(UNIT_TEST_NAMES); do \
		if grep -q -E '(\$error|FAIL|Error)' $(LOG_DIR)/$$test.log; then \
			echo "$$test: FAILED"; \
			echo "  Log: $(LOG_DIR)/$$test.log"; \
			PASSED=false; \
		else \
			echo "$$test: PASSED"; \
		fi; \
	done; \
	if ! $$PASSED; then \
		echo "Unit tests FAILED!\n"; \
		exit 1; \
	else \
		echo "Unit tests PASSED!\n"; \
	fi

# == Integration Tests (using tb.v) ==

# Compile the main integration testbench (tb.v)
compile_integration: $(BUILD_DIR)/tb.out

$(BUILD_DIR)/tb.out: tb.v $(SRCS) | $(BUILD_DIR)
	@echo "Compiling integration testbench: tb.v\n"
	$(IVERILOG) -o $@ -I include tb.v $(SRCS)

# Run all integration tests (using different memory files with tb.out)
run_integration: compile_integration | $(LOG_DIR) $(WAVE_DIR)
	@echo "--- Running Integration Tests ---"
	@for test_num in $(INTEGRATION_TEST_NAMES); do \
		echo "Running integration test $$test_num..."; \
		if [ ! -f test/teste$$test_num.mem ]; then echo "Missing test/teste$$test_num.mem"; exit 1; fi; \
		cp test/teste$$test_num.mem memory.mem; \
		$(VVP) $(BUILD_DIR)/tb.out | grep '===' > $(LOG_DIR)/integration_$$test_num.log 2>&1; \
		if [ -f saida.vcd ]; then \
			mv saida.vcd $(WAVE_DIR)/saida$$test_num.vcd; \
		else \
			echo "Warning: saida.vcd not created for test $$test_num"; \
		fi; \
		rm -f memory.mem; \
	done

# Check results of all integration tests using diff against .ok files
test_integration: run_integration
	@echo "\n--- Checking Integration Test Results ---"
	@PASSED=true; \
	for test_num in $(INTEGRATION_TEST_NAMES); do \
		LOG_FILE=$(LOG_DIR)/integration_$$test_num.log; \
		OK_FILE=test/saida$$test_num.ok; \
		if [ ! -f "$$OK_FILE" ]; then \
			echo "Integration Test $$test_num: SKIPPED (Missing expected output file $$OK_FILE)"; \
			continue; \
		fi; \
		if [ ! -f "$$LOG_FILE" ]; then \
			echo "Integration Test $$test_num: FAILED (Missing simulation log file $$LOG_FILE)"; \
			PASSED=false; \
			continue; \
		fi; \
		if $(DIFF) --strip-trailing-cr -q "$$LOG_FILE" "$$OK_FILE" > /dev/null; then \
			echo "Integration Test $$test_num: PASSED"; \
		else \
			echo "Integration Test $$test_num: FAILED"; \
			echo "  Output log ($$LOG_FILE) differs from expected ($$OK_FILE)."; \
			PASSED=false; \
		fi; \
	done; \
	if ! $$PASSED; then \
		echo "Integration tests FAILED!\n"; \
		exit 1; \
	else \
		echo "Integration tests PASSED!\n"; \
	fi

# == Register Dump Tests (using tb_regdump.v) ==

# Compile the specific register dump testbench
compile_reg_dump: $(BUILD_DIR)/tb_regdump.out

$(BUILD_DIR)/tb_regdump.out: tb_regdump.v $(SRCS) | $(BUILD_DIR)
	@echo "Compiling register dump testbench: tb_regdump.v"
	$(IVERILOG) -o $@ -I include tb_regdump.v $(SRCS)

# Run all register dump simulations using tb_regdump.out in a loop
run_reg_dump: compile_reg_dump | $(LOG_DIR) $(WAVE_DIR)
	@echo "--- Running Register Dump Tests ---"
	@for test_name in $(REG_DUMP_TEST_NAMES); do \
		echo "Running register dump test $$test_name..."; \
		if [ ! -f test/$${test_name}.mem ]; then \
			echo "Error: Input file test/$${test_name}.mem not found!"; \
			exit 1; \
		fi; \
		cp test/$${test_name}.mem memory.mem; \
		$(VVP) $(BUILD_DIR)/tb_regdump.out > $(LOG_DIR)/$${test_name}.simlog 2>&1; \
		if [ -f reg_dump.txt ]; then \
			mv reg_dump.txt $(LOG_DIR)/$${test_name}.regactual; \
			echo "  Generated actual register dump: $(LOG_DIR)/$${test_name}.regactual"; \
		else \
			echo "  Error: reg_dump.txt not created by simulation for test $$test_name"; \
		fi; \
		if [ -f regdump_wave.vcd ]; then \
			mv regdump_wave.vcd $(WAVE_DIR)/$${test_name}_regdump.vcd; \
		fi; \
		rm -f memory.mem; \
	done

# Check results of all register dump tests against manually created .regok files
test_reg_dump: run_reg_dump
	@echo "\n--- Checking Register Dump Test Results ---"
	@PASSED_ALL_REG=true; \
	for test_name in $(REG_DUMP_TEST_NAMES); do \
		ACTUAL_FILE=$(LOG_DIR)/$${test_name}.regactual; \
		EXPECTED_FILE=test/$${test_name}.regok; \
		if [ ! -f "$$EXPECTED_FILE" ]; then \
			echo "$$test_name: SKIPPED (Missing manually created expected file $$EXPECTED_FILE)"; \
			continue; \
		fi; \
		if [ ! -f "$$ACTUAL_FILE" ]; then \
			echo "$$test_name: FAILED (Missing simulation output file $$ACTUAL_FILE)"; \
			PASSED_ALL_REG=false; \
			continue; \
		fi; \
		echo "Comparing: $$ACTUAL_FILE vs $$EXPECTED_FILE"; \
		if $(DIFF) --strip-trailing-cr -q "$$ACTUAL_FILE" "$$EXPECTED_FILE" > /dev/null; then \
			echo "$$test_name: PASSED"; \
		else \
			echo "$$test_name: FAILED"; \
			echo "  Run 'diff \"$$ACTUAL_FILE\" \"$$EXPECTED_FILE\"' to see differences."; \
			PASSED_ALL_REG=false; \
		fi; \
	done; \
	if ! $$PASSED_ALL_REG; then \
		echo "Register dump tests FAILED!\n"; \
		exit 1; \
	else \
		echo "Register dump tests PASSED!\n"; \
	fi


# == Combined Test ==
# Run unit tests, integration tests, and register dump tests
test: test_unit test_integration test_reg_dump

# Clean generated files
clean:
	@echo "Cleaning build artifacts..."
	rm -rf $(BUILD_DIR) $(WAVE_DIR) $(LOG_DIR)
	rm -f memory.mem reg_dump.txt saida.vcd regdump_wave.vcd